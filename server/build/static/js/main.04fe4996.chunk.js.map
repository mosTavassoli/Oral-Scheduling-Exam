{"version":3,"sources":["auth/AuthContext.js","shared/consts.js","components/LoginForm.js","components/Header.js","components/CreateSession.js","api/API.js","components/CreateExam.js","components/ExecuteExam.js","components/ShowSlots.js","components/Teacher.js","components/StudentPage.js","components/BookingSlot.js","components/ShowReport.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","React","createContext","authUser","ROLES","UserRole","props","state","username","password","role","submitted","error","has_error","handleInputChange","bind","handleSubmit","event","target","value","name","this","setState","onLogin","preventDefault","Consumer","context","to","Container","fluid","className","Row","Col","md","span","offset","Form","method","onSubmit","loginUser","FormGroup","onChange","FormControl","type","id","placeholder","required","autoFocus","Button","variant","color","Component","Header","Navbar","light","expand","NavbarToggler","onClick","toggleNav","Collapse","isOpen","isNavOpen","navbar","Nav","NavItem","logoutUser","CreateSession","dateChangeHandler","date","key","handleCreateSession","ev","toggleModal","session","Object","assign","slotGenerator","moment","toDate","startingTime","totalDuration","Modal","toggle","isModalOpen","ModalHeader","ModalBody","Label","htmlFor","selected","dateFormat","minDate","Date","Input","duration","a","Promise","resolve","reject","fetch","baseURL","headers","body","JSON","stringify","then","response","ok","json","user","obj","catch","err","errors","param","msg","userJson","status","errObj","console","log","payLoad","exam_no","slot_id","reservedExam","API","userLogin","userLogout","isAuthenticated","getStudentLists","saveExam","getExamLists","getTeacherSlots","updateGrade","getStudentExams","getReservedExams","getExamSlots","reservingSlot","cancelExam","getFinalResultReport","getstudentNotBooked","CreateExam","disabledInputDuration","onCheckChange","studentId","checked","prevState","totalNumberOfStudents","studentsId","index","indexOf","filter","_","i","totalDurationExam","startTime","slotsForEachSession","totalNumberOfSlots","temp","startStopTime","endTime","add","format","subtract","push","start_time","end_time","sessions","lastSession","saveExamHandler","examHasBeenCreated","payload","dates","studentIds","durationTime","studentLists","Table","striped","bordered","hover","size","teacherStudentLists","map","studentList","Group","Check","e","column","sm","Control","disabled","Alert","Heading","ExecuteExam","executeExamHandler","getExamtLists","len","examLists","examList","controlId","ShowSlots","exam_id","examId","counter","grade","x","parseInt","grades","examIds","isExecuteButtonClick","window","location","href","split","teacherSlots","teacherSlot","length","Teacher","handleClick","width","pathname","StudentPage","handleCancelReservation","listStudentExams","listReservedExams","updateState","studentExams","reservedExams","isSameOrAfter","examCount","exam","handleReserve","countReserved","gradeConversion","renderCancelButton","renderExams","renderReserveredExams","BoookingSlot","handlerSelect","slot","selectedSlot","buttonDisabled","handlersave","redirect","mounted","isReservedButtonClick","listSlots","ShowReport","finalResultReport","studentNotBooked","fullReports","listStudentsNotBooked","student","renderFinalResult","App","logout","authErr","history","login","errorObj","setTimeout","students","exams","details","isClicked","result","array","Provider","path","component","LoginForm","BookingSlot","from","exact","withRouter","Boolean","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.04fe4996.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const AuthContext = React.createContext({ authUser: {} });\r\n","export const ROLES  = {\r\n    TEACHER: 'teacher',\r\n    STUDENT: 'student',\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Col,\r\n  Button,\r\n  FormControl,\r\n  Container,\r\n  Row,\r\n} from \"react-bootstrap\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport { ROLES } from \"../shared/consts\";\r\n\r\nclass UserRole extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      role: ROLES.TEACHER,\r\n      submitted: false,\r\n      error: \"\",\r\n      has_error: false,\r\n    };\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  handleSubmit(event, onLogin) {\r\n    // console.log(this.state.username, this.state.password, this.state.role);\r\n    event.preventDefault();\r\n    onLogin(this.state.username, this.state.password, this.state.role);\r\n  }\r\n  render() {\r\n    // if (this.state.submitted) return <Redirect to=\"/addexam\" />;\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <>\r\n            {context.authUser && <Redirect to=\"/home\" />}\r\n\r\n            <Container fluid className=\"center center mt-5\">\r\n              <Row>\r\n                <Col md={{ span: 4, offset: 4 }}>\r\n                  <h3> Select your Role: </h3>\r\n\r\n                  <Form\r\n                    method=\"POST\"\r\n                    onSubmit={(event) =>\r\n                      this.handleSubmit(event, context.loginUser)\r\n                    }\r\n                  >\r\n                    <FormGroup>\r\n                      <select\r\n                        className=\"form-control\"\r\n                        role={this.state.role}\r\n                        onChange={this.handleInputChange}\r\n                        name=\"role\"\r\n                      >\r\n                        <option value=\"teacher\">Teacher</option>\r\n                        <option value=\"student\">Student</option>\r\n                      </select>\r\n                    </FormGroup>\r\n\r\n                    {this.state.role === ROLES.TEACHER && (\r\n                      <>\r\n                        <FormGroup>\r\n                          <FormControl\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            name=\"username\"\r\n                            placeholder=\"Username\"\r\n                            value={this.state.username}\r\n                            onChange={this.handleInputChange}\r\n                            required\r\n                            autoFocus\r\n                          />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                          <FormControl\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Password\"\r\n                            value={this.state.password}\r\n                            onChange={this.handleInputChange}\r\n                            required\r\n                          />\r\n                        </FormGroup>\r\n                      </>\r\n                    )}\r\n\r\n                    {this.state.role === ROLES.STUDENT && (\r\n                      <>\r\n                        <FormGroup>\r\n                          <FormControl\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            name=\"username\"\r\n                            placeholder=\"Student ID\"\r\n                            value={this.state.username}\r\n                            onChange={this.handleInputChange}\r\n                            required\r\n                            autoFocus\r\n                          />\r\n                        </FormGroup>\r\n                      </>\r\n                    )}\r\n\r\n                    <FormGroup>\r\n                      <Button variant=\"primary\" type=\"submit\" color=\"primary\">\r\n                        Login\r\n                      </Button>\r\n                    </FormGroup>\r\n                  </Form>\r\n                  {/* {context.authErr && (\r\n                    <Alert variant=\"danger\">{context.authErr.msg}</Alert>\r\n                  )} */}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserRole;\r\n","import React from \"react\";\r\n\r\nimport { Nav, Navbar, NavbarToggler, Collapse, NavItem } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport { ROLES } from \"../shared/consts\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <AuthContext.Consumer>\r\n      {(context) => (\r\n        <>\r\n          {context.authUser ? (\r\n            <>\r\n              <Navbar light expand=\"md\">\r\n                <div className=\"container\">\r\n                  <NavbarToggler onClick={props.toggleNav} />\r\n                  <Collapse isOpen={props.isNavOpen} navbar>\r\n                    <Nav navbar>\r\n                      {context.authUser.role === ROLES.TEACHER && (\r\n                        <NavItem>\r\n                          <NavLink className=\"nav-link\" to=\"/home\">\r\n                            Home\r\n                          </NavLink>\r\n                        </NavItem>\r\n                      )}\r\n                      {context.authUser.role === ROLES.TEACHER && (\r\n                        <NavItem>\r\n                          <NavLink className=\"nav-link\" to=\"/exam/create\">\r\n                            Create Exam\r\n                          </NavLink>\r\n                        </NavItem>\r\n                      )}\r\n                      {context.authUser.role === ROLES.TEACHER && (\r\n                        <NavItem>\r\n                          <NavLink className=\"nav-link\" to=\"/exam/execute\">\r\n                            Execute Exam\r\n                          </NavLink>\r\n                        </NavItem>\r\n                      )}\r\n                      {context.authUser.role === ROLES.TEACHER && (\r\n                        <NavItem>\r\n                          <NavLink className=\"nav-link\" to=\"/exam/showreport\">\r\n                            Show Report\r\n                          </NavLink>\r\n                        </NavItem>\r\n                      )}\r\n                      <NavItem>\r\n                        <NavLink\r\n                          className=\"nav-link\"\r\n                          to=\"/logout\"\r\n                          onClick={() => context.logoutUser()}\r\n                        >\r\n                          Logout\r\n                        </NavLink>\r\n                      </NavItem>\r\n                    </Nav>\r\n                  </Collapse>\r\n                </div>\r\n              </Navbar>\r\n            </>\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </>\r\n      )}\r\n    </AuthContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalBody,\r\n  ModalHeader,\r\n  Label,\r\n  Input,\r\n  FormGroup,\r\n  Form,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport * as moment from \"moment\";\r\n\r\nclass CreateSession extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      date: moment().toDate(),\r\n      startingTime: \"\",\r\n      totalDuration: \"\",\r\n    };\r\n  }\r\n\r\n  dateChangeHandler = (date, key) => {\r\n    this.setState({\r\n      [key]: date,\r\n    });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleCreateSession = (ev) => {\r\n    ev.preventDefault();\r\n    this.props.toggleModal(); //close modal once it is created;\r\n    let session = Object.assign({}, this.state);\r\n    session.date = this.state.date;\r\n    this.props.slotGenerator(session);\r\n  };\r\n  render() {\r\n    return (\r\n      <Modal toggle={this.props.toggleModal} isOpen={this.props.isModalOpen}>\r\n        <ModalHeader toggle={this.props.toggleModal}>\r\n          Create Session\r\n        </ModalHeader>\r\n        <ModalBody>\r\n          <Form onSubmit={this.handleCreateSession}>\r\n            <FormGroup>\r\n              <Label htmlFor=\"date\">Date : {\"\\u00A0\"} </Label>\r\n              <DatePicker\r\n                className=\"form-control\"\r\n                selected={this.state.date}\r\n                onChange={(date) => this.dateChangeHandler(date, \"date\")}\r\n                dateFormat=\"yyyy/MM/dd\"\r\n                minDate={new Date()}\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"startingTime\">Starting Time :</Label>\r\n              <Input\r\n                type=\"time\"\r\n                id=\"startingTime\"\r\n                name=\"startingTime\"\r\n                value={this.state.startingTime}\r\n                onChange={this.handleInputChange}\r\n                required\r\n              ></Input>\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label htmlFor=\"date\">Total Duration :</Label>\r\n              <Input\r\n                type=\"text\"\r\n                id=\"totalduration\"\r\n                name=\"totalDuration\"\r\n                value={this.state.totalDuration}\r\n                onChange={this.handleInputChange}\r\n                required\r\n              ></Input>\r\n            </FormGroup>\r\n\r\n            {this.state.totalDuration % this.props.duration === 0 ? (\r\n              <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                Create\r\n              </Button>\r\n            ) : (\r\n              <Alert variant=\"info\">\r\n                <p>This Number must be multiple of \"duration of each Slot\"</p>\r\n              </Alert>\r\n            )}\r\n          </Form>\r\n        </ModalBody>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateSession;\r\n","const baseURL = \"/api\";\r\n\r\nasync function userLogin(username, password, role) {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(baseURL + \"/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: username,\r\n        password: password,\r\n        role: role,\r\n        // role: role,\r\n      }),\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          response.json().then((user) => {\r\n            resolve(user);\r\n          });\r\n        } else {\r\n          // analyze the cause of error\r\n          response\r\n            .json()\r\n            .then((obj) => {\r\n              reject(obj);\r\n            }) // error msg in the response body\r\n            .catch((err) => {\r\n              reject({\r\n                errors: [\r\n                  { param: \"Application\", msg: \"Cannot parse server response\" },\r\n                ],\r\n              });\r\n            }); // something else\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        reject({ errors: [{ param: \"Server\", msg: \"Cannot communicate\" }] });\r\n      }); // connection errors\r\n  });\r\n}\r\n\r\nasync function userLogout() {\r\n  return new Promise((resolve, reject) => {\r\n    fetch(baseURL + \"/logout\", {\r\n      method: \"POST\",\r\n    }).then((response) => {\r\n      if (response.ok) {\r\n        resolve(null);\r\n      } else {\r\n        // analyze the cause of error\r\n        response\r\n          .json()\r\n          .then((obj) => {\r\n            reject(obj);\r\n          }) // error msg in the response body\r\n          .catch((err) => {\r\n            reject({\r\n              errors: [\r\n                { param: \"Application\", msg: \"Cannot parse server response\" },\r\n              ],\r\n            });\r\n          }); // something else\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nasync function isAuthenticated() {\r\n  const response = await fetch(`${baseURL}/verify`);\r\n  const userJson = await response.json();\r\n  if (response.ok) {\r\n    return userJson;\r\n  } else {\r\n    let err = { status: response.status, errObj: userJson };\r\n    throw err; // An object with the error coming from the server\r\n  }\r\n}\r\n\r\n// ------------- fetch the list of Students form DB for CreateExam Component\r\nasync function getStudentLists() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/studentLists`);\r\n    // if (response.status === 200) {\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Error\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ------------- Save slots for an exams into DB\r\nasync function saveExam(payLoad) {\r\n  const response = await fetch(`${baseURL}/saveExam`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ payLoad }),\r\n  });\r\n  console.log(\"save exams\", response);\r\n  return response.json();\r\n}\r\n\r\n// ------------- fetch the list of Exams form DB for ExecuteExam Component\r\nasync function getExamLists() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/examLists`);\r\n\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Error\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ------------- fetch the list of slots form DB for ShowSlots Component\r\nasync function getTeacherSlots(exam_no, date) {\r\n  try {\r\n    const response = await fetch(\r\n      `${baseURL}/teacherExamSlots/${exam_no}?date=${date}`\r\n    ); // Query String\r\n\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Error\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ------------------------------------- Update the grade in proper table\r\n\r\nasync function updateGrade(payLoad) {\r\n  const response = await fetch(`${baseURL}/updateGrade`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ payLoad }),\r\n  });\r\n  return response.json();\r\n}\r\n//---------------Teacher report page API FUNCTIONS\r\n\r\nasync function getFinalResultReport() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/exam/getFullreport`);\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\nasync function getstudentNotBooked() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/exam/getStudentNotBooked`);\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n//---------------StudentPage and BookingSlots API FUNCTIONS\r\n\r\nasync function getStudentExams() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/studentExams`);\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getReservedExams() {\r\n  try {\r\n    const response = await fetch(`${baseURL}/reservedExams`);\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function getExamSlots(exam_no) {\r\n  try {\r\n    const response = await fetch(`${baseURL}/examSlots/${exam_no}`);\r\n    if (response.ok) {\r\n      return response.json();\r\n    } else {\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function reservingSlot(slot_id) {\r\n  const response = await fetch(`${baseURL}/examSlots/${slot_id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  return response.json();\r\n}\r\n\r\nasync function cancelExam(reservedExam) {\r\n  const response = await fetch(\r\n    `${baseURL}/deleteExamSlots/${reservedExam.id}?exam_no=${reservedExam.exam_no}`,\r\n    {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  return response.json();\r\n}\r\n\r\nconst API = {\r\n  userLogin,\r\n  userLogout,\r\n  isAuthenticated,\r\n  getStudentLists,\r\n  saveExam,\r\n  getExamLists,\r\n  getTeacherSlots,\r\n  updateGrade,\r\n  getStudentExams,\r\n  getReservedExams,\r\n  getExamSlots,\r\n  reservingSlot,\r\n  cancelExam,\r\n  getFinalResultReport,\r\n  getstudentNotBooked,\r\n};\r\nexport default API;\r\n","import React from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  Col,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Table,\r\n  Alert,\r\n} from \"react-bootstrap\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport CreateSession from \"./CreateSession\";\r\nimport moment from \"moment\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport API from \"../api/API\";\r\n\r\nclass CreateExam extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      examHasBeenCreated: false,\r\n      isModalOpen: false,\r\n      totalNumberOfStudents: 0,\r\n      duration: \"\",\r\n      totalNumberOfSlots: 0,\r\n      disabledInputDuration: false,\r\n      startStopTime: [],\r\n      studentsId: [],\r\n      startTime: \"\",\r\n      totalDuration: \"\",\r\n      sessions: {},\r\n      dates: {},\r\n      lastSession: 1,\r\n      // final Object which is sent to Server\r\n      payload: {\r\n        studentIds: [],\r\n        date: [],\r\n        totalDuration: \"\",\r\n        durationTime: [], // contains the whole start and end time of slots\r\n        startTime: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.studentLists();\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n      disabledInputDuration: true,\r\n    });\r\n  };\r\n\r\n  onCheckChange = (event, studentId) => {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n\r\n    // ----- handle the number of Selected Students and Add/Remove StudentNo from the Specific Array\r\n    if (target.type === \"checkbox\") {\r\n      if (value === true) {\r\n        // access to the previous value by means of prevState\r\n        this.setState((prevState) => {\r\n          return {\r\n            totalNumberOfStudents: prevState.totalNumberOfStudents + 1, // Add the number of Selected Student\r\n            studentsId: [...prevState.studentsId, studentId], // add the studentNO. into the Array\r\n          };\r\n        });\r\n      } else {\r\n        const index = this.state.studentsId.indexOf(studentId);\r\n        this.setState((prevState) => {\r\n          return {\r\n            totalNumberOfStudents: prevState.totalNumberOfStudents - 1, // reduce the number of Selected Student\r\n\r\n            // the _ is sometimes used to represent an unused argument. Here, it's the current item in the array.\r\n            studentsId: this.state.studentsId.filter((_, i) => i !== index), // remove the studentNO. from the Array\r\n          };\r\n        });\r\n      }\r\n    }\r\n    // ---------------------------------- END --------------------------------------\r\n  };\r\n\r\n  handleCreateSession = (event) => {\r\n    event.preventDefault();\r\n    this.toggleModal(); //close modal once it is created;\r\n  };\r\n\r\n  // ---------------------------------  function for Slots Creation --------------------------------------------------\r\n  slotGenerator = (session) => {\r\n    const totalDurationExam = session.totalDuration;\r\n    const startingTime = session.startingTime;\r\n    const date = session.date;\r\n\r\n    this.setState({\r\n      startTime: startingTime,\r\n      totalDuration: totalDurationExam,\r\n      date: date,\r\n    });\r\n    const slotsForEachSession = totalDurationExam / this.state.duration; // variable fo loop\r\n\r\n    // ---------------------- Calculate required total number of Slots and setState for the exam\r\n    this.setState((prevState) => {\r\n      return {\r\n        totalNumberOfSlots:\r\n          prevState.totalNumberOfSlots +\r\n          totalDurationExam / this.state.duration,\r\n      };\r\n    });\r\n\r\n    // ------- take the start tiem from object and change it into moment with \"h:mmA\" format\r\n    let temp = moment(session.startingTime, \"h:mmA\"); // in order to prevent issue, set temp variable instead of working with object per sei\r\n\r\n    const startStopTime = []; // array for pushing the start and end time of slots\r\n\r\n    // -------------- Generate an Array of start and end times for each Slot by Means of LOOP -------------------------\r\n    for (let i = 0; i < slotsForEachSession; i++) {\r\n      const endTime = temp\r\n        .add(this.state.duration, \"minutes\")\r\n        .format(\"hh:mm A\");\r\n\r\n      const startTime = temp\r\n        .subtract(this.state.duration, \"minutes\")\r\n        .format(\"hh:mm A\");\r\n\r\n      temp = temp.add(this.state.duration, \"minutes\"); // change the session start time\r\n\r\n      startStopTime.push({\r\n        start_time: startTime,\r\n        end_time: endTime,\r\n        date: session.date,\r\n      });\r\n    }\r\n\r\n    let sessions = { ...this.state.sessions };\r\n    sessions[this.state.lastSession] = startStopTime;\r\n\r\n    this.setState({\r\n      sessions: { ...sessions },\r\n      lastSession: this.state.lastSession + 1,\r\n    });\r\n\r\n    // ------------------------ End function (slotGenerator) for Slots Creation --------------------------------\r\n  };\r\n\r\n  // -------------------------- save the Exam and return to /home, Pass the PAYLOAD with all required INFO ---------------------------\r\n  saveExamHandler = async () => {\r\n    this.setState(\r\n      {\r\n        examHasBeenCreated: true,\r\n        payload: {\r\n          date: this.state.dates,\r\n          studentIds: this.state.studentsId,\r\n          totalDuration: this.state.duration,\r\n          durationTime: this.state.sessions,\r\n        },\r\n      },\r\n      async () => {\r\n        await API.saveExam(this.state.payload);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.state.examHasBeenCreated) {\r\n      return <Redirect to=\"/home\" />;\r\n    }\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <>\r\n            {context.authUser === null && <Redirect to=\"/login\"></Redirect>}\r\n            <Container fluid>\r\n              <Row>\r\n                <Col md={8}>\r\n                  <Table striped bordered hover size=\"sm\" className=\"mt-5\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>#</th>\r\n                        <th>Student Number</th>\r\n                        <th>Student Name</th>\r\n                        <th>Select</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {this.props.teacherStudentLists?.map(\r\n                        (studentList, index) => (\r\n                          <tr key={index}>\r\n                            <td>{studentList.id}</td>\r\n                            <td>{studentList.username}</td>\r\n                            <td>{studentList.name}</td>\r\n                            <td>\r\n                              <Form.Group>\r\n                                <Form.Check\r\n                                  onChange={(event) =>\r\n                                    this.onCheckChange(event, studentList.id)\r\n                                  }\r\n                                  type=\"checkbox\"\r\n                                  name=\"checkbox\"\r\n                                />\r\n                              </Form.Group>\r\n                            </td>\r\n                          </tr>\r\n                        )\r\n                      )}\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n                <Col md={4} className=\"mt-5\">\r\n                  <Form\r\n                    onSubmit={(e) => {\r\n                      e.preventDefault();\r\n                    }}\r\n                  >\r\n                    <Form.Group>\r\n                      <Form.Label column htmlFor=\"duration\">\r\n                        Duration of Each Slot (in Minute)\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                        <Form.Control\r\n                          value={this.state.duration}\r\n                          onChange={this.onCheckChange}\r\n                          id=\"lastname\"\r\n                          size=\"sm\"\r\n                          name=\"duration\"\r\n                          placeholder=\"Duration\"\r\n                          disabled={this.state.disabledInputDuration}\r\n                          required\r\n                          autoFocus\r\n                          type=\"number\"\r\n                        />\r\n                      </Col>\r\n                    </Form.Group>\r\n                    <p>{`The Number of Selected Students :    ${this.state.totalNumberOfStudents}`}</p>\r\n                    <p>{`The Number of defined Slots :    ${this.state.totalNumberOfSlots}`}</p>\r\n\r\n                    <FormGroup>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        size=\"sm\"\r\n                        className=\"fixed-right-bottom\"\r\n                        onClick={this.toggleModal}\r\n                        // disabled={this.state.duration ? false : true}\r\n                        disabled={!this.state.duration}\r\n                      >\r\n                        Create Session\r\n                      </Button>\r\n                    </FormGroup>\r\n                    {/* {this.state.totalNumberOfStudents &&\r\n                    this.state.totalNumberOfSlots &&\r\n                    this.state.totalNumberOfSlots >=\r\n                      this.state.totalNumberOfStudents ? ( */}\r\n                    <FormGroup>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        size=\"sm\"\r\n                        className=\"fixed-right-bottom\"\r\n                        onClick={this.saveExamHandler}\r\n                        disabled={\r\n                          !this.state.totalNumberOfStudents ||\r\n                          !this.state.totalNumberOfSlots ||\r\n                          !(\r\n                            this.state.totalNumberOfSlots >=\r\n                            this.state.totalNumberOfStudents\r\n                          )\r\n                        }\r\n                      >\r\n                        Save Exam\r\n                      </Button>\r\n                    </FormGroup>\r\n\r\n                    {this.state.totalNumberOfSlots >=\r\n                    this.state.totalNumberOfStudents ? (\r\n                      <></>\r\n                    ) : (\r\n                      <Alert variant=\"danger\">\r\n                        <Alert.Heading>ERROR!</Alert.Heading>\r\n                        <p>\r\n                          The Number Of Slots are lower than the Number Of\r\n                          Students. <br />\r\n                          You need{\"\\u00A0\"}\r\n                          {this.state.totalNumberOfStudents -\r\n                            this.state.totalNumberOfSlots}\r\n                          {\"\\u00A0\"}\r\n                          extra Slots. Please create more Slots.\r\n                        </p>\r\n                      </Alert>\r\n                    )}\r\n                  </Form>\r\n                  {this.state.isModalOpen && (\r\n                    <CreateSession\r\n                      isModalOpen={this.state.isModalOpen}\r\n                      toggleModal={this.toggleModal}\r\n                      handleCreateSession={this.handleCreateSession}\r\n                      slotGenerator={this.slotGenerator}\r\n                      duration={this.state.duration} // use to calculate the multiple of Total Duration\r\n                    />\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateExam;\r\n","import React from \"react\";\r\nimport { Form, Col, Container, Row, Table, Button } from \"react-bootstrap\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nclass ExecuteExam extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      exam_no: \"\",\r\n      date: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getExamtLists();\r\n  }\r\n\r\n  executeExamHandler = (exam_no, date) => {\r\n    this.setState({\r\n      exam_no: exam_no,\r\n      date: date,\r\n    });\r\n    this.props.getTeacherSlots(exam_no, date, true);\r\n  };\r\n\r\n  render() {\r\n    if (this.state.exam_no) {\r\n      return <Redirect to={`/exams/slots?exam_no=${this.state.exam_no}`} />; // passing exam_no as QueryString for preventing loosing Data when refresh the Page\r\n    }\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <>\r\n            {context.authUser === null && <Redirect to=\"/login\"></Redirect>}\r\n            <Container>\r\n              <Row>\r\n                <Col md={12}>\r\n                  {this.props.len !== 0 ? (\r\n                    <Table striped bordered hover size=\"sm\" className=\"mt-5\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Exam Number</th>\r\n                          <th>Date</th>\r\n                          <th>Select</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {this.props.examLists?.map((examList, index) => (\r\n                          <tr key={index}>\r\n                            <td>{examList.exam_no}</td>\r\n                            <td>{examList.date}</td>\r\n                            <td>\r\n                              <Form.Group controlId=\"\">\r\n                                <Button\r\n                                  onClick={() =>\r\n                                    this.executeExamHandler(\r\n                                      examList.exam_no,\r\n                                      examList.date\r\n                                    )\r\n                                  }\r\n                                  // to={{\r\n                                  //   pathname: \"/exams/slots\",\r\n                                  // }}\r\n                                  name=\"execute\"\r\n                                  className=\"btn btn-primary\"\r\n                                >\r\n                                  Execute\r\n                                </Button>\r\n                              </Form.Group>\r\n                            </td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </Table>\r\n                  ) : (\r\n                    <p className=\"d-flex justify-content-center text-danger display-5 mt-5\">\r\n                      There is no Exam to execute\r\n                    </p>\r\n                  )}\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExecuteExam;\r\n","import React from \"react\";\r\nimport { Col, Container, Row, Table, FormGroup, Button } from \"react-bootstrap\";\r\n// import * as QueryString from \"query-string\";\r\n\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport API from \"../api/API\";\r\n\r\nclass ShowSlots extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...props,\r\n      submitted: false,\r\n      counter: 0,\r\n      grade: [],\r\n      examId: [],\r\n      payload: {\r\n        grades: [],\r\n        examIds: [],\r\n      },\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (!this.props.isExecuteButtonClick) {\r\n      this.props.getTeacherSlots(window.location.href.split(\"=\")[1]);\r\n    }\r\n  }\r\n\r\n  handleInputChange = (exam_id, event) => {\r\n    event.preventDefault();\r\n    const target = event.target;\r\n\r\n    let value = target.value;\r\n    // const name = target.name;\r\n\r\n    // ====================== in order to prevent duplication grade into array\r\n    const index = this.state.examId.indexOf(exam_id);\r\n\r\n    switch (value) {\r\n      case \"fail\":\r\n        value = -1;\r\n        break;\r\n      case \"withdraw\":\r\n        value = -2;\r\n        break;\r\n      case \"absent\":\r\n        value = -3;\r\n        break;\r\n      case \"none\":\r\n        this.setState({\r\n          counter: this.state.counter - 1,\r\n          grade: this.state.grade.filter((x, i) => i !== index),\r\n          examId: this.state.examId.filter((x, i) => i !== index),\r\n        });\r\n        break;\r\n      default:\r\n        value = parseInt(value);\r\n    }\r\n\r\n    let grades = this.state.grade;\r\n\r\n    if (index !== -1 && value !== \"none\") {\r\n      grades[index] = value;\r\n\r\n      this.setState({\r\n        grade: grades,\r\n      });\r\n    } else if (value !== \"none\") {\r\n      this.setState((prevState) => {\r\n        return {\r\n          examId: [...prevState.examId, exam_id],\r\n          grade: [...prevState.grade, value],\r\n          counter: this.state.counter + 1,\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  saveExamHandler = async () => {\r\n    this.setState(\r\n      {\r\n        submitted: !this.state.submitted,\r\n        payload: {\r\n          grades: this.state.grade,\r\n          examIds: this.state.examId,\r\n        },\r\n      },\r\n      async () => {\r\n        await API.updateGrade(this.state.payload);\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.state.submitted) {\r\n      return <Redirect to=\"/home\" />;\r\n    }\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <>\r\n            {context.authUser === null && <Redirect to=\"/login\"></Redirect>}\r\n            <Container>\r\n              <Row>\r\n                <Col md={10}>\r\n                  <Table striped bordered hover size=\"sm\" className=\"mt-5\">\r\n                    <thead>\r\n                      <tr>\r\n                        {/* <th>#</th> */}\r\n                        <th>Exam Number</th>\r\n                        <th>Student Number</th>\r\n                        <th>Student Name</th>\r\n                        <th>Duration</th>\r\n                        <th>Start Time</th>\r\n                        <th>End Time</th>\r\n                        {/* <th>Booking Status</th> */}\r\n                        <th>Date</th>\r\n                        <th>Grade</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {this.props.teacherSlots?.map((teacherSlot) => (\r\n                        <tr key={teacherSlot.id}>\r\n                          {/* <td>{teacherSlot.id}</td> */}\r\n                          <td>{teacherSlot.exam_no}</td>\r\n                          <td>{teacherSlot.username}</td>\r\n                          <td>{teacherSlot.name}</td>\r\n                          <td>{teacherSlot.duration}</td>\r\n                          <td>{teacherSlot.start_time}</td>\r\n                          <td>{teacherSlot.end_time}</td>\r\n                          {/* <td>{teacherSlot.booking_status}</td> */}\r\n                          <td>{teacherSlot.date}</td>\r\n                          <td>\r\n                            <FormGroup>\r\n                              <select\r\n                                value={this.state.value}\r\n                                size=\"sm\"\r\n                                className=\"form-control \"\r\n                                name=\"grade\"\r\n                                onChange={(event) =>\r\n                                  this.handleInputChange(teacherSlot.id, event)\r\n                                }\r\n                              >\r\n                                <option value=\"none\">Select Option</option>\r\n                                <option value=\"fail\">Fail</option>\r\n                                <option value=\"withdraw\">Withdraw</option>\r\n                                <option value=\"absent\">Absent</option>\r\n                                <option value=\"18\">18</option>\r\n                                <option value=\"19\">19</option>\r\n                                <option value=\"20\">20</option>\r\n                                <option value=\"21\">21</option>\r\n                                <option value=\"22\">22</option>\r\n                                <option value=\"23\">23</option>\r\n                                <option value=\"24\">24</option>\r\n                                <option value=\"25\">25</option>\r\n                                <option value=\"26\">26</option>\r\n                                <option value=\"27\">27</option>\r\n                                <option value=\"28\">28</option>\r\n                                <option value=\"29\">29</option>\r\n                                <option value=\"30\">30</option>\r\n                                <option value=\"31\">31</option>\r\n                              </select>\r\n                            </FormGroup>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </Table>\r\n                </Col>\r\n                <Col md={2}>\r\n                  <FormGroup>\r\n                    <Button\r\n                      className=\"mt-5\"\r\n                      variant=\"primary\"\r\n                      type=\"submit\"\r\n                      color=\"primary\"\r\n                      onClick={this.saveExamHandler}\r\n                      disabled={this.state.counter !== this.props.length}\r\n                    >\r\n                      Save Grades\r\n                    </Button>\r\n                  </FormGroup>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowSlots;\r\n","import React from \"react\";\r\nimport { Row, Col, Form, FormGroup, Container } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\nclass Teacher extends React.Component {\r\n  render() {\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <Container>\r\n            <h2 className=\"mt-5 , mb-5\">\r\n              Welcome Prof. {context.authUser?.name}\r\n            </h2>\r\n\r\n            <Row>\r\n              <Col md={{ span: 4, offset: 4 }}>\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Link\r\n                      onClick={this.handleClick}\r\n                      width=\"80\"\r\n                      key=\"1\"\r\n                      to={{\r\n                        pathname: \"/exam/create\",\r\n                      }}\r\n                      className=\"btn btn-primary w-100\"\r\n                    >\r\n                      Create Exam\r\n                    </Link>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Link\r\n                      to={{\r\n                        pathname: \"/exam/execute\",\r\n                      }}\r\n                      className=\"btn btn-primary w-100\"\r\n                    >\r\n                      Execute Exam\r\n                    </Link>\r\n                  </FormGroup>\r\n                  <FormGroup>\r\n                    <Link\r\n                      to={{\r\n                        pathname: \"/exam/showreport\",\r\n                      }}\r\n                      className=\"btn btn-primary w-100\"\r\n                    >\r\n                      Show Report\r\n                    </Link>\r\n                  </FormGroup>\r\n\r\n                  {/* <FormGroup>\r\n            <Button variant=\"primary\" type=\"Button\" color=\"primary\">\r\n              Create Exam\r\n            </Button>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Button variant=\"primary\" type=\"Button\" color=\"primary\">\r\n              Execute Exam\r\n            </Button>\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Button variant=\"primary\" type=\"Button\" color=\"primary\">\r\n              Report\r\n            </Button>\r\n          </FormGroup> */}\r\n                </Form>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Teacher;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\n\r\nimport API from \"../api/API\";\r\nimport moment from \"moment\";\r\nimport { AuthContext } from \"../auth/AuthContext\";\r\n\r\n//STUDENT SEGMENT\r\nclass StudentPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.studentExams(); //calling this function to get data of assigned exam to student from the database after login\r\n    this.props.reservedExams(); //calling this function to get data of student's reserved exam from the database after login\r\n  }\r\n\r\n  gradeConversion(grade) {\r\n    let value = grade;\r\n    switch (value) {\r\n      case -1:\r\n        return (value = \"Fail\");\r\n      case -2:\r\n        return (value = \"Withdraw\");\r\n      case -3:\r\n        return (value = \"Absent\");\r\n      case 31:\r\n        return (value = \"30L\");\r\n      default:\r\n        return (value = grade);\r\n    }\r\n  }\r\n\r\n  //----------------Conditional rendering of \"cancel button\"\r\n\r\n  renderCancelButton(reservedExam) {\r\n    //passed reserved exam object to this funciton to cancel\r\n    if (\r\n      moment().isSameOrAfter(reservedExam.date) ||\r\n      reservedExam.grade !== null\r\n    )\r\n      //checking the current date is sameOrafter of exam date or not\r\n      return <p>Not possible to cancel the exam</p>; // show this msg instead of button\r\n    return (\r\n      <button\r\n        className=\"btn btn-danger btn-sm\"\r\n        onClick={() => this.handleCancelReservation(reservedExam)} //calling handler and pass the single reservedexam object\r\n      >\r\n        Cancel\r\n      </button>\r\n    );\r\n  }\r\n\r\n  //----------------handler of \"cancel button\"-------------------\r\n  handleCancelReservation = async (reservedExam) => {\r\n    await API.cancelExam(reservedExam);\r\n    const listStudentExams = this.props.listStudentExams.filter(\r\n      (e) => e.exam_no !== reservedExam.exam_no\r\n    );\r\n    listStudentExams.push({ ...reservedExam });\r\n    let listReservedExams = this.props.listReservedExams;\r\n    listReservedExams = listReservedExams.filter(\r\n      (e) => e.id !== reservedExam.id\r\n    );\r\n    this.props.updateState(\"listStudentExams\", listStudentExams);\r\n    this.props.updateState(\"listReservedExams\", listReservedExams);\r\n  };\r\n\r\n  renderExams() {\r\n    const { length: examCount } = this.props.listStudentExams; //checking the length of listStudentexams array\r\n\r\n    if (examCount === 0)\r\n      //if length of array is zero,the below <p> will render instead of table\r\n      return (\r\n        <h5 className=\"mt-5\">\r\n          Ooops There are no exams assigned to you to reserve OR you missed\r\n          deadline (deadline is a day before the exam's first session date)\r\n          !!!!!\r\n        </h5>\r\n      ); //\r\n    return (\r\n      <div>\r\n        <h5 className=\"mt-5\">There are {examCount} exams assigned to you</h5>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Exam Title</th>\r\n              <th>Exam Number</th>\r\n              <th>Reserve the exam</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.listStudentExams.map((exam, index) => (\r\n              <tr key={index}>\r\n                <td>{exam.name}</td>\r\n                <td>{exam.exam_no}</td>\r\n                <td>\r\n                  <Button\r\n                    key={index}\r\n                    onClick={() => this.props.handleReserve(exam.exam_no, true)} //calling the handleReserve (in app.js) to get list of slots of specific exam\r\n                    width=\"40\"\r\n                    className=\"btn btn-primary w-50\"\r\n                  >\r\n                    Reserve Exam\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //----------------Conditional rendering of list of Reserved exams and it's slot for student-------------------\r\n\r\n  renderReserveredExams() {\r\n    const { length: countReserved } = this.props.listReservedExams; // checking the length of listReservedExams array that contains list of exams that student has already reserved.\r\n    if (countReserved === 0)\r\n      return <h5 className=\"mt-5\">There are no reserved exams </h5>;\r\n    return (\r\n      <div>\r\n        <h5 className=\"mt-5\">You have {countReserved} reserved exams</h5>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <td>Exam title</td>\r\n              <td>Date</td>\r\n              <td>Start Time</td>\r\n              <td>End Time</td>\r\n              <td>Grade</td>\r\n              <td>Cancel the exam</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.listReservedExams.map((reservedExam, index) => (\r\n              <tr key={index}>\r\n                <td>{reservedExam.name}</td>\r\n                <td>{reservedExam.date}</td>\r\n                <td>{reservedExam.start_time}</td>\r\n                <td>{reservedExam.end_time}</td>\r\n                {/* <td>{reservedExam.grade}</td> */}\r\n                <td>{this.gradeConversion(reservedExam.grade)}</td>\r\n                <td>{this.renderCancelButton(reservedExam)}</td>\r\n                {/* calling the conditional rendering function of button  */}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => (\r\n          <Container>\r\n            <h2 className=\"mt-5  mb-5\">\r\n              Welcome Student. {context.authUser?.name}{\" \"}\r\n            </h2>\r\n            <div>\r\n              <div>{this.renderExams()}</div>\r\n              {/*calling the conditional rendering function of showing list availabe exams which are assainged to the student  */}\r\n              <div> {this.renderReserveredExams()}</div>\r\n              {/*calling the conditional rendering function of showing list reserved exams which are registered by student  */}\r\n            </div>\r\n          </Container>\r\n        )}\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentPage;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport API from \"../api/API\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n//SHOWING THE EXAM'S SLOT IN THIS PAGE\r\nclass BoookingSlot extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedSlot: {},\r\n      buttonDisabled: true,\r\n      mounted: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (!this.props.isReservedButtonClick) {\r\n      this.props.handleReserve(window.location.href.split(\"=\")[1]);\r\n    }\r\n  }\r\n\r\n  handlerSelect = async (slot) => {\r\n    //get details in object form of selected slot and store into selectedSlot\r\n\r\n    await this.setState({\r\n      selectedSlot: slot,\r\n      buttonDisabled: false,\r\n    });\r\n  };\r\n\r\n  handlersave = async () => {\r\n    //saving (PUT) selectedSlot object into database\r\n    await API.reservingSlot(this.state.selectedSlot.id); //passing only the slot's ID to Api\r\n\r\n    this.setState({ redirect: true });\r\n  };\r\n\r\n  //---------------------rendering the list of availabe slot and saving and cenceling button -------------------\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect push to=\"/student\" />;\r\n    }\r\n\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Start Time</th>\r\n                <th>Choose..</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.props.listSlots.map((slot, index) => (\r\n                <tr key={index}>\r\n                  <td>{slot.date}</td>\r\n                  <td>{slot.start_time}</td>\r\n                  <td>\r\n                    <input\r\n                      onChange={() => this.handlerSelect(slot)}\r\n                      className=\"form-check-input\"\r\n                      type=\"radio\"\r\n                      name=\"exampleRadios\"\r\n                      id=\"exampleRadios1\"\r\n                      value=\"option1\"\r\n                    />\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <Row>\r\n            <Col>\r\n              <button\r\n                onClick={this.handlersave}\r\n                disabled={this.state.buttonDisabled}\r\n                className=\"btn btn-primary w-30  \"\r\n              >\r\n                Save\r\n              </button>\r\n            </Col>\r\n            <Col>\r\n              <Link\r\n                width=\"40\"\r\n                key=\"1\"\r\n                to={{\r\n                  pathname: \"/student/\", //back to the student main page by clicking cancel button\r\n                }}\r\n                className=\"btn btn-danger w-30\"\r\n              >\r\n                Cancel\r\n              </Link>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BoookingSlot;\r\n","import React, { Component } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nclass ShowReport extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.finalResultReport();\r\n    this.props.studentNotBooked();\r\n  }\r\n\r\n  gradeConversion(grade) {\r\n    let value = grade;\r\n    switch (value) {\r\n      case -1:\r\n        return (value = \"Fail\");\r\n      case -2:\r\n        return (value = \"Withdraw\");\r\n      case -3:\r\n        return (value = \"Absent\");\r\n      case 31:\r\n        return (value = \"30L\");\r\n      default:\r\n        return (value = grade);\r\n    }\r\n  }\r\n\r\n  renderFinalResult() {\r\n    // const { length: examCount } = this.props.listStudentExams; //checking the length of listStudentexams array\r\n\r\n    // if (examCount === 0)\r\n    //   //if length of array is zero,the below <p> will render instead of table\r\n    //   return <p> Ooops There are no exams assigned to you to reserve !!!!!</p>; //\r\n    return (\r\n      <div>\r\n        <h5 className=\"mt-5\">\r\n          There is a list of the final report of exam and student grade.\r\n        </h5>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Exam Number</th>\r\n              <th>Course name</th>\r\n              <th>Start Time</th>\r\n              <th>End Time</th>\r\n              <th>Date</th>\r\n              <th>Student</th>\r\n              <th>Grade</th>\r\n              {/* <th>Attendance</th> */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.fullReports.map((exam, index) => (\r\n              <tr key={index}>\r\n                <td>{exam.exam_no}</td>\r\n                <td>{exam.name}</td>\r\n                <td>{exam.start_time}</td>\r\n                <td>{exam.end_time}</td>\r\n                <td>{exam.date}</td>\r\n                <td>{exam.username}</td>\r\n                <td>{this.gradeConversion(exam.grade)}</td>\r\n                {/* <td>{exam.is_absent}</td> */}\r\n                <td>\r\n                  {/* <Link\r\n                    onClick={() => this.props.handleReserve(exam.exam_no)} //calling the handleReserve (in app.js) to get list of slots of specific exam\r\n                    width=\"40\"\r\n                    \r\n                    to={{\r\n                      pathname: \"/student/reserve\", //go to the BookingSlot component to see list of availabe slots and do booking\r\n                    }}\r\n                    className=\"btn btn-primary w-50\"\r\n                  >\r\n                    Reserve Exam\r\n                  </Link> */}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  studentNotBooked() {\r\n    // const { length: examCount } = this.props.listStudentExams; //checking the length of listStudentexams array\r\n\r\n    // if (examCount === 0)\r\n    //   //if length of array is zero,the below <p> will render instead of table\r\n    //   return <p> Ooops There are no exams assigned to you to reserve !!!!!</p>; //\r\n    return (\r\n      <div>\r\n        <h5 className=\"mt-5\">\r\n          There is a list of student that did not book the exam.\r\n        </h5>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Exam Number</th>\r\n              <th>Student Name</th>\r\n              <th>Student Username</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.listStudentsNotBooked.map((student, index) => (\r\n              <tr key={index}>\r\n                <td>{student.exam_no}</td>\r\n                <td>{student.name}</td>\r\n                <td>{student.username}</td>\r\n                <td>\r\n                  {/* <Link\r\n                    onClick={() => this.props.handleReserve(exam.exam_no)} //calling the handleReserve (in app.js) to get list of slots of specific exam\r\n                    width=\"40\"\r\n                    \r\n                    to={{\r\n                      pathname: \"/student/reserve\", //go to the BookingSlot component to see list of availabe slots and do booking\r\n                    }}\r\n                    className=\"btn btn-primary w-50\"\r\n                  >\r\n                    Reserve Exam\r\n                  </Link> */}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <div>\r\n          <div>{this.renderFinalResult()}</div>\r\n          <div>{this.studentNotBooked()}</div>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowReport;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport LoginForm from \"./components/LoginForm\";\r\nimport Header from \"./components/Header\";\r\nimport CreateExam from \"./components/CreateExam\";\r\nimport ExecuteExam from \"./components/ExecuteExam\";\r\nimport ShowSlots from \"./components/ShowSlots\";\r\nimport Teacher from \"./components/Teacher\";\r\nimport API from \"./api/API\";\r\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"./auth/AuthContext\";\r\nimport { Col, Row, Container, Alert } from \"react-bootstrap\";\r\nimport { ROLES } from \"./shared/consts\";\r\nimport StudentPage from \"./components/StudentPage\";\r\nimport BookingSlot from \"./components/BookingSlot\";\r\nimport ShowReport from \"./components/ShowReport\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // this.toggleNav = this.toggleNav.bind(this);\r\n    this.state = {\r\n      err: \"\",\r\n      isNavOpen: false,\r\n      isReservedButtonClick: false,\r\n      isExecuteButtonClick: false,\r\n      teacherStudentLists: [],\r\n      examLists: [], // contains tle list of Exams for teacher for ShowSlots Component\r\n      teacherSlots: [], // contains the list Of Slots for specific exam for ExecuteExam Component\r\n      role: \"\",\r\n      listStudentExams: [], //assaigned exams to the student\r\n      listReservedExams: [], //reserved exam and its slot's details\r\n      listSlots: [], //availabe slots related to the specific exam\r\n      fullReports: [], //showing the final report of exams and grade\r\n      listStudentsNotBooked: [], //contain the list of students details that not booked the exam\r\n    };\r\n  }\r\n\r\n  toggleNav = () => {\r\n    this.setState({\r\n      isNavOpen: !this.state.isNavOpen,\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    //check if the user is authenticated\r\n    API.isAuthenticated()\r\n      .then((user) => {\r\n        this.setState({ authUser: user });\r\n      })\r\n      .catch((err) => {\r\n        this.props.history.push(\"/login\");\r\n        this.setState({ authErr: err.errorObj });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  }\r\n\r\n  // handleErrors(err) {\r\n  //   if (err) {\r\n  //     if (err.status && err.status === 401) {\r\n  //       this.setState({ authErr: err.errorObj });\r\n  //       this.props.history.push(\"/login\");\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  logout = () => {\r\n    return API.userLogout().then(() => {\r\n      this.setState({ authUser: null, authErr: null });\r\n      this.props.history.push(\"/login\");\r\n    });\r\n  };\r\n\r\n  login = (username, password, role) => {\r\n    return API.userLogin(username, password, role)\r\n      .then((user) => {\r\n        if (user.role === ROLES.TEACHER) {\r\n          this.setState({ authUser: user, authErr: null });\r\n          this.props.history.push(\"/home\");\r\n\r\n          this.setState({\r\n            role: this.state.authUser.role,\r\n          });\r\n        } else if (user.role === ROLES.STUDENT) {\r\n          this.setState({ authUser: user, authErr: null });\r\n          this.props.history.push(\"/student\");\r\n\r\n          this.setState({\r\n            role: this.state.authUser.role,\r\n          });\r\n        }\r\n      })\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2500);\r\n      });\r\n  };\r\n\r\n  //------- get the List of Students for an authorized Teacher ---- used in CreateExam Component\r\n  studentLists = () => {\r\n    API.getStudentLists()\r\n      .then((students) =>\r\n        this.setState({\r\n          teacherStudentLists: students || [],\r\n        })\r\n      )\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n\r\n  //------- get the List of Exams for an authorized Teacher ---- used in ExecuteExam Component\r\n  examLists = () => {\r\n    API.getExamLists()\r\n      .then((exams) =>\r\n        this.setState({\r\n          examLists: exams || [],\r\n        })\r\n      )\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n  //***------------------------functions related to Teacher Report page----------------***\r\n\r\n  finalResultReport = () => {\r\n    API.getFinalResultReport()\r\n      .then((details) => {\r\n        //getting the array of assaigned exams's details from API'S function (exam_no ,name) and storing into listStudentExams Array\r\n        this.setState({\r\n          fullReports: details,\r\n        });\r\n      })\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n\r\n  getTeacherSlots = async (exam_no, date, isClicked) => {\r\n    this.setState({\r\n      isExecuteButtonClick: isClicked,\r\n    });\r\n    const result = await API.getTeacherSlots(exam_no, date);\r\n    try {\r\n      setTimeout(() => {\r\n        this.setState({\r\n          isExecuteButtonClick: false,\r\n        });\r\n      }, 200);\r\n\r\n      this.setState({\r\n        teacherSlots: result || [],\r\n      });\r\n    } catch (errorObj) {\r\n      this.setState({\r\n        err: errorObj.errors[0].msg,\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          err: \"\",\r\n        });\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  studentNotBooked = () => {\r\n    API.getstudentNotBooked()\r\n      .then((details) => {\r\n        //getting the array of assaigned exams's details from API'S function (exam_no ,name) and storing into listStudentExams Array\r\n        this.setState({\r\n          listStudentsNotBooked: details,\r\n        });\r\n      })\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n\r\n  //***------------------------functions related to StudentPage AND BookingSlots components----------------***\r\n\r\n  //------------------------calling the API function for getting the array of assaigned exams\r\n  studentExams = () => {\r\n    API.getStudentExams()\r\n      .then((studentExams) => {\r\n        //getting the array of assaigned exams's details from API'S function (exam_no ,name) and storing into listStudentExams Array\r\n\r\n        this.setState({\r\n          listStudentExams: studentExams,\r\n        });\r\n      })\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n  //------------------------calling the API function for getting the array of reserved exams\r\n  reservedExams = () => {\r\n    API.getReservedExams()\r\n      .then((reservedExams) => {\r\n        //getting the array of reserved exams's details from API'S function (full details) and storing into listReservedExams Array\r\n        this.setState({\r\n          listReservedExams: reservedExams,\r\n        });\r\n      })\r\n      .catch((errorObj) => {\r\n        this.setState({\r\n          err: errorObj.errors[0].msg,\r\n        });\r\n        setTimeout(() => {\r\n          this.setState({\r\n            err: \"\",\r\n          });\r\n        }, 2000);\r\n      });\r\n  };\r\n\r\n  //------------------------after clicking the reserve button in StudentPage component using this is handler function, and it's calling the API function for getting the array of specific exam's slots and passing the exam_no to the API function\r\n\r\n  handleReserve = async (exam_no, isClicked) => {\r\n    this.setState({\r\n      isReservedButtonClick: isClicked,\r\n    });\r\n    const result = await API.getExamSlots(exam_no); //passing the exam number (exam_no) and get the array of objects, contains the details of slots related to that exam number\r\n    setTimeout(() => {\r\n      this.setState({\r\n        isReservedButtonClick: false,\r\n      });\r\n    }, 200);\r\n\r\n    this.setState({\r\n      listSlots: result,\r\n    });\r\n    this.props.history.push(`/student/reserve?exam_no=${exam_no}`);\r\n  };\r\n\r\n  //------------------------using this function inorder to update the arrays in studentPage components\r\n  updateState = async (key, array) => {\r\n    this.setState({\r\n      [key]: array,\r\n    });\r\n  };\r\n\r\n  getQueryParam() {\r\n    return this.props;\r\n  }\r\n\r\n  render() {\r\n    const value = {\r\n      authUser: this.state.authUser,\r\n      authErr: this.state.authErr,\r\n      loginUser: this.login,\r\n      logoutUser: this.logout,\r\n    };\r\n\r\n    return (\r\n      <AuthContext.Provider value={value}>\r\n        <Header\r\n          isNavOpen={this.state.isNavOpen}\r\n          toggleNav={this.toggleNav}\r\n          role={this.state.role}\r\n        />\r\n        <Container fluid>\r\n          <Switch>\r\n            <Route path=\"/home\" component={Teacher}></Route>\r\n            <Route path=\"/login\" component={LoginForm}></Route>\r\n            <Route path=\"/exam/create\">\r\n              <CreateExam\r\n                studentLists={this.studentLists}\r\n                teacherStudentLists={this.state.teacherStudentLists}\r\n              />\r\n            </Route>\r\n            <Route path=\"/exam/execute\">\r\n              <ExecuteExam\r\n                getExamtLists={this.examLists}\r\n                examLists={this.state.examLists}\r\n                len={this.state.examLists.length}\r\n                getTeacherSlots={this.getTeacherSlots}\r\n                teacherSlots={this.state.teacherSlots}\r\n              />\r\n            </Route>\r\n            <Route path=\"/exams/slots\">\r\n              <ShowSlots\r\n                getTeacherSlots={this.getTeacherSlots}\r\n                teacherSlots={this.state.teacherSlots}\r\n                length={this.state.teacherSlots.length}\r\n                isExecuteButtonClick={this.state.isExecuteButtonClick}\r\n                // getQueryParam={this.getQueryParam}\r\n              />\r\n            </Route>\r\n            <Route path=\"/exam/showreport\">\r\n              <ShowReport\r\n                fullReports={this.state.fullReports}\r\n                finalResultReport={this.finalResultReport}\r\n                studentNotBooked={this.studentNotBooked}\r\n                listStudentsNotBooked={this.state.listStudentsNotBooked}\r\n              />\r\n            </Route>\r\n            <Route path=\"/student/reserve\">\r\n              <BookingSlot\r\n                listSlots={this.state.listSlots}\r\n                handleReserve={this.handleReserve}\r\n                isReservedButtonClick={this.state.isReservedButtonClick}\r\n              />\r\n            </Route>\r\n            <Route path=\"/student\">\r\n              <StudentPage\r\n                listStudentExams={this.state.listStudentExams}\r\n                listReservedExams={this.state.listReservedExams}\r\n                studentExams={this.studentExams}\r\n                reservedExams={this.reservedExams}\r\n                handleReserve={this.handleReserve}\r\n                updateState={this.updateState}\r\n              />\r\n            </Route>\r\n            <Route path=\"/logout\"></Route>\r\n            <Redirect from=\"/\" exact to=\"login\" />\r\n          </Switch>\r\n        </Container>\r\n        <Row>\r\n          <Col md={4}></Col>\r\n          <Col md={4}>\r\n            {this.state.err ? (\r\n              <Alert variant=\"danger\">\r\n                <Alert.Heading>Warning !</Alert.Heading>\r\n                <p className=\"\">{this.state.err}</p>\r\n              </Alert>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </AuthContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"react-datepicker/dist/react-datepicker-cssmodules.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.Fragment>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}